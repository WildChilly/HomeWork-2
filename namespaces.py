import math

def square(x):
    d = x ** 2

    return d

a = 5
b = square(2)
print(a)
print(b)
print(math.sqrt(a))
print(globals())
a = 6
print(a)



# Порядок поиска переменных в пространстве имён
# Порядок поиска:
#
#
#
# 1) Локальное пространство (Local) — внутри текущей функции.
#
#
#
# 2) Закрывающее пространство (Enclosing) — пространство внешней функции, если есть вложенные функции.
#
#
#
# 3) Глобальное пространство (Global) — на уровне модуля.
#
#
#
# 4) Встроенное пространство (Built-in) — функции Python по умолчанию, такие как "print", "len" и т.д.


a = 10 # Глобальная переменная



def outer():
    a = 5 # Переменная внешней функции
    return a


def inner():
    x = ''
    if x == input('Ghf: '):
        return (x)
    print(a) # Поиск начинается с локального пространства
    print(x)


print(inner())



print(outer()) # Вывод: 5





#Объяснение:
#
# Переменная "a" сначала ищется внутри функции "inner()".
# Так как её там нет, интерпретатор проверяет функцию "outer()", где "a" = 5.
# Глобальная "a" = 10 используется только в том случае, если переменная не найдена ни в одном из внутренних пространств.
# Если "a" не была бы найдена ни в одном из предыдущих уровней, Python искал бы её среди встроенных объектов.
#
#
# Этот механизм помогает избежать конфликтов имён, обеспечивая строгую иерархию поиска. Если функция находит переменную
# на одном уровне, она останавливает дальнейший поиск, гарантируя предсказуемое поведение программы.